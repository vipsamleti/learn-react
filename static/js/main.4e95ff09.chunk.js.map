{"version":3,"sources":["components/series_name/SeriesNames.js","components/intro/Intro.js","containers/series/Series.js","containers/series/single_series.js","components/main/Main.js","components/app/App.js","serviceWorker.js","index.js"],"names":["SeriesListItem","series","to","show","id","name","SeriesNames","props","list","map","key","className","Intro","message","flag","Series","state","employeeId","isFetching","onSeriesIdInputChanges","e","console","log","target","value","setState","concat","fetch","then","response","json","this","seriesId","type","onChange","trim","length","Component","SingleSeries","singleSeriesJson","match","params","href","premiered","rating","average","_embedded","episodes","alt","src","image","medium","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e95ff09.chunk.js","sourcesContent":["import React from 'react';\nimport './SeriesList.css';\nimport { Link } from 'react-router-dom';\n\nconst SeriesListItem  = ({series}) => (\n\n    <li>\n        <Link to = {`/series/${series.show.id}`}>\n            {series.show.name}\n        </Link>\n    </li>\n)\n\nconst SeriesNames = (props) => {\n\n    return(\n        <div>\n            Web-Series Names:\n            <ul>\n                {props.list.map(series  =>(\n                    <li key = {series.show.id} className=\"listNames\">\n                        \n                        <SeriesListItem series = {series} key={series.show.id}/>\n                    \n                    </li>\n                ))}\n                \n            </ul>\n        </div>\n    );\n}\n\nexport default SeriesNames;","import React from 'react';\n\nconst Intro = (props) => {\n    return <p>{props.message} {props.flag}</p>;\n  }\n\nexport default Intro;","import React, { Component } from \"react\";\nimport SeriesNames from '../../components/series_name/SeriesNames'\nimport Intro from '../../components/intro/Intro'\n\nclass Series extends Component{\n\n    state = {\n        series: [],\n        employeeId: '',\n        isFetching: false\n    }\n\n\n    onSeriesIdInputChanges = e => {\n\n        console.log(\"entered...\"+ e.target.value);\n\n        this.setState({ employeeId : e.target.value, isFetching : true});\n\n        if(e.target.value !== ''){\n\n            console.log('http://api.tvmaze.com/search/shows?q='.concat(e.target.value));\n\n            fetch(`http://api.tvmaze.com/search/shows?q=${e.target.value}`)\n                .then(response => response.json())\n                .then(json => this.setState({ series: json, isFetching: false}));\n        }\n        else{\n            this.setState({isFetching: false, series: []});\n        }\n    }\n\n\n    render(){\n\n        const {series, employeeId: seriesId, isFetching} = this.state;\n\n        return (\n            <div>\n                <p>\n                    Learning ReactJS...\n                </p>\n          \n                <Intro message = \"Here you can find interesting web-series details...\"/>\n\n                <div>\n                    <input value = {seriesId} \n                            type=\"text\" \n                            onChange={this.onSeriesIdInputChanges}></input>\n                </div>\n\n                {\n                    !isFetching && seriesId.trim() === ''\n                    &&\n                    <p>No web-series has been found</p>\n                }\n                {\n                    isFetching && <p>Loading....</p>\n                }\n                {\n                    !isFetching && series.length !== 0 && <SeriesNames list = {this.state.series}/>\n                }\n                \n            </div>\n        );\n    }\n}\nexport default Series;","import React, {Component} from 'react'\n\nclass SingleSeries extends Component{\n\n    state = {\n        singleSeriesJson: null\n    }\n\n    componentDidMount(){\n\n        const {id} = this.props.match.params;\n\n        console.log('http://api.tvmaze.com/shows/'.concat(id).concat('?embed=episodes'));\n\n        fetch(`http://api.tvmaze.com/shows/${id}?embed=episodes`)\n                .then(response => response.json())\n                .then(json => this.setState({ singleSeriesJson: json}));\n\n\n        console.log(this.state.singleSeriesJson);        \n    }\n\n    render(){\n        \n        const {singleSeriesJson} = this.state;\n\n        return(\n            <div>\n                <a href=\"/\">search more</a>\n                {\n        \n                    singleSeriesJson !== null\n                    &&\n                    <div>\n                        <h1>{singleSeriesJson.name}</h1>\n                        <p>Premiered : {singleSeriesJson.premiered}</p>\n                        <p>Ratings : {singleSeriesJson.rating.average}</p>\n                        <p>Episodes : {singleSeriesJson._embedded.episodes.length}</p>\n                        <p>\n                            <img alt= \"shosingleSeriesJsonw\" src={singleSeriesJson.image.medium}></img>\n                        </p>\n                    </div>\n\n                    \n                }\n\n            </div>\n        );\n    }\n}\n\nexport default SingleSeries;","import React from 'react';\nimport { Switch, Route} from 'react-router-dom';\nimport Series from '../../containers/series/Series'\nimport SingleSeries from '../../containers/series/single_series'\n\nconst Main = props => (\n\n    <Switch>\n        <Route exact path = \"/\" component = {Series}/>\n        <Route path = \"/series/:id\" component = {SingleSeries} />\n    </Switch>\n);\n\nexport default Main;","import React, { Component } from 'react';\nimport Main from '../main/Main'\nimport './App.css';\nimport 'whatwg-fetch';\n\nclass App extends Component {\n  \n  \n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          \n          <h1>ReactJS Application for searching Web-Series details..</h1>\n\n          <Main/>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App'\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>, \n            document.getElementById('root')\n    );\n\nserviceWorker.unregister();\n"],"sourceRoot":""}